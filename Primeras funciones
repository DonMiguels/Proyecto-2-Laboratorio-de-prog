
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

const int MAX_ESTUDIANTES = 1200;
const int MAX_NOTAS = 6;
const int MAX_PROFESORES = 20;

struct Estudiante {
    string id;
    string nombre;
    string apellido;
    string email;
    string genero;
    string seccion;
    string notas[MAX_NOTAS];
};

struct Profesor {
    string id;
    string nombre;
    string apellido;
    string genero;
    string email;
    string seccion;
    string id_materia;
};

struct Materia {
        string nombre;
        Estudiante estudiantes[MAX_ESTUDIANTES];
        string cantidadAlumnos;
    };

float calcularPromedio(const Estudiante& estudiante) {
    float suma = 0.0;
    int contador = 0;
    for (int i = 0; i < MAX_NOTAS; i++) {
        if (!estudiante.notas[i].empty()){
            try{
                suma+= stof(estudiante.notas[i]);
                contador++;
            } catch (const invalid_argument&){

            }
        }
       
    }
    return contador > 0 ? suma / contador : 0.0;
}

int cargarEstudiantes(Estudiante estudiantes[MAX_ESTUDIANTES]) {
    ifstream archivo("Datos_Estudiantes_revisado.csv");
    int cantidadEstudiantes = 0;
    if (archivo.is_open()) {
        string linea;
        int numeroLinea = 0;
        while (getline(archivo, linea)) {
            numeroLinea++;
            if (numeroLinea > 1) {
                Estudiante estudiante;
                size_t pos = 0;
                string token;
                int index = 0;
                while ((pos = linea.find(";")) != string::npos) {
                    token = linea.substr(0, pos);
                    switch (index) {
                        case 0:
                            estudiante.id = token;
                            break;
                        case 1:
                            estudiante.nombre = token;
                            break;
                        case 2:
                            estudiante.apellido = token;
                            break;
                        case 3:
                            estudiante.genero = token;
                            break;
                        case 4:
                            estudiante.email = token;
                            break;
                        case 5:
                            estudiante.seccion = token;
                            break;
                        default:
                            estudiante.notas[index - 6] = token;
                            break;
                    }
                    linea.erase(0, pos + 1);
                    index++;
                }
                if (!linea.empty()) {
                    estudiante.notas[index - 6] = linea;
                }
                estudiantes[cantidadEstudiantes] = estudiante;
                cantidadEstudiantes++;
            }
        }
        archivo.close();
    }
    return cantidadEstudiantes;
}

int cargarProfesores(Profesor profesores[MAX_PROFESORES]) {
    ifstream archivo("Datos_Profesores.csv");
    int cantidadProfesores = 0;
    if (archivo.is_open()) {
        string linea;
        int numeroLinea = 0;
        while (getline(archivo, linea)) {
            numeroLinea++;
            if (numeroLinea > 1) {
                Profesor profesor;
                size_t pos = 0;
                string token;
                int index = 0;
                while ((pos = linea.find(";")) != string::npos) {
                    token = linea.substr(0, pos);
                    switch (index) {
                        case 0:
                            profesor.id = token;
                            break;
                        case 1:
                            profesor.nombre = token;
                            break;
                        case 2:
                            profesor.apellido = token;
                            break;
                        case 3:
                            profesor.genero = token;
                            break;
                        case 4:
                            profesor.email = token;
                            break;
                        case 5:
                            profesor.seccion = token;
                            break;
                        case 6:
                            profesor.id_materia = token;
                            break;
                        default:
                            break;
                    }
                    linea.erase(0, pos + 1);
                    index++;
                }
                if (!linea.empty()) {
                    profesor.id_materia = linea;
                }
                profesores[cantidadProfesores] = profesor;
                cantidadProfesores++;
            }
        }
        archivo.close();
    }
    return cantidadProfesores;
}



void guardarEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    ofstream archivo("Datos_Estudiantes_revisado.csv");
    if (archivo.is_open()) {
        for (int i = 0; i < cantidadEstudiantes; i++) {
            archivo << estudiantes[i].nombre << ";" << estudiantes[i].apellido << ";" << estudiantes[i].email << ";"
                    << estudiantes[i].genero;
            for (int j = 0; j < MAX_NOTAS; j++) {
                archivo << ";" << estudiantes[i].notas[j];
            }
            archivo << endl;
        }
        archivo.close();
    }
}

void guardarProfesores(const Profesor profesores[MAX_PROFESORES], int cantidadProfesores) {
    ofstream archivo("Datos_Profesores.csv");
    if (archivo.is_open()) {
        for (int i = 0; i < cantidadProfesores; i++) {
            archivo << profesores[i].id << ";" << profesores[i].nombre << ";" << profesores[i].apellido << ";"
                    << profesores[i].genero << ";" << profesores[i].email << ";" << profesores[i].seccion << ";"
                    << profesores[i].id_materia << endl;
        }
        archivo.close();
    } else {
        cout << "No se pudo abrir el archivo para guardar los nuevos datos de profesores." << endl;
    }
}

void borrarEstudiante(Estudiante estudiantes[MAX_ESTUDIANTES], int& cantidadEstudiantes, const string& id) {
    int indiceEstudiante = -1;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].id == id) {
            indiceEstudiante = i;
            break;
        }
    }

    if (indiceEstudiante != -1) {
        for (int i = indiceEstudiante; i < cantidadEstudiantes - 1; i++) {
            estudiantes[i] = estudiantes[i + 1];
        }
        cantidadEstudiantes--;

        // Guardar cambios en el archivo CSV
        guardarEstudiantes(estudiantes, cantidadEstudiantes);

        cout << "El estudiante ha sido eliminado correctamente." << endl;
    } else {
        cout << "No se encontró el estudiante con el ID especificado." << endl;
    }
}

bool compararPromedios(const Estudiante& estudiante1, const Estudiante& estudiante2) {
    float promedio1 = calcularPromedio(estudiante1);
    float promedio2 = calcularPromedio(estudiante2);
    return promedio1 > promedio2; // Ordenar de mayor a menor promedio
}

void top10PromediosSeccion(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& seccion) {
    Estudiante estudiantesSeccion[MAX_ESTUDIANTES];
    int cantidadEstudiantesSeccion = 0;

    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].seccion == seccion) {
            estudiantesSeccion[cantidadEstudiantesSeccion] = estudiantes[i];
            cantidadEstudiantesSeccion++;
        }
    }

    if (cantidadEstudiantesSeccion == 0) {
        cout << "No se encontraron estudiantes en la sección especificada." << endl;
        return;
    }

    // Ordenar estudiantes por promedio (bubble sort)
    for (int i = 0; i < cantidadEstudiantesSeccion - 1; i++) {
        for (int j = 0; j < cantidadEstudiantesSeccion - i - 1; j++) {
            if (compararPromedios(estudiantesSeccion[j], estudiantesSeccion[j + 1])) {
                swap(estudiantesSeccion[j], estudiantesSeccion[j + 1]);
            }
        }
    }

    cout << "Top 10 de mejores promedios para la sección " << seccion << ":" << endl;
    for (int i = 0; i < min(10, cantidadEstudiantesSeccion); i++) {
        cout << "Nombre: " << estudiantesSeccion[i].nombre << " " << estudiantesSeccion[i].apellido
             << ", Promedio: " << calcularPromedio(estudiantesSeccion[i]) << endl;
    }
}

string obtenerNombreMateria(int materiaIndice) {
    switch (materiaIndice) {
        case 0:
            return "Matemáticas";
        case 1:
            return "Sociales";
        case 2:
            return "Biología";
        case 3:
            return "EF";
        case 4:
            return "Artes";
        default:
            return "Materia desconocida";
    }
}

float obtenerPorcentajeAprobados(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& seccion, int materiaIndice) {
    int totalEstudiantes = 0;
    int aprobados = 0;

    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].seccion == seccion) {
            totalEstudiantes++;
            float nota = stof(estudiantes[i].notas[materiaIndice]);
            if (nota >= 9.46) {
                aprobados++;
            }
        }
    }

    if (totalEstudiantes > 0) {
        return static_cast<float>(aprobados) / totalEstudiantes * 100.0;
    } else {
        return 0.0; // No hay estudiantes en la sección especificada
    }
}

string calcularRendimientoProfesor(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& seccion, int materiaIndice) {
    float porcentajeAprobados = obtenerPorcentajeAprobados(estudiantes, cantidadEstudiantes, seccion, materiaIndice);

    if (porcentajeAprobados >= 0) {
        if (porcentajeAprobados >= 70.0) {
            return "Bueno";
        } else if (porcentajeAprobados >= 50.0 && porcentajeAprobados < 60.0) {
            return "Normal";
        } else {
            return "Malo";
        }
    } else {
        return "Sección no encontrada";
    }
}

void mejorRendimientoPorSeccion(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    const int NUM_MATERIAS = 5;

    // Crea una matriz para almacenar los porcentajes de aprobados de cada profesor por sección y materia
    float porcentajes[MAX_ESTUDIANTES][NUM_MATERIAS] = {0.0};

    // Cuenta la cantidad de profesores en cada sección
    int cantidadProfesores[MAX_ESTUDIANTES] = {0};

    // Calcula los porcentajes de aprobados de cada profesor en cada sección y materia
    for (int i = 0; i < cantidadEstudiantes; i++) {
        string seccion = estudiantes[i].seccion;
        int materiaIndice = 0;
        for (int j = 0; j < NUM_MATERIAS; j++) {
            float porcentaje = obtenerPorcentajeAprobados(estudiantes, cantidadEstudiantes, seccion, j);
            porcentajes[cantidadProfesores[i]][materiaIndice++] = porcentaje;
        }
        cantidadProfesores[i]++;
    }

    // Encuentra los profesores con el mejor rendimiento por sección
    for (int i = 0; i < cantidadEstudiantes; i++) {
        cout << "Sección: " << estudiantes[i].seccion << endl;
        for (int j = 0; j < NUM_MATERIAS; j++) {
            if (porcentajes[i][j] >= 0) {
                cout << "Materia: " << obtenerNombreMateria(j) << ", Rendimiento: " << porcentajes[i][j] << "%" << endl;
            }
        }
        cout << endl;
    }
}

string obtenerNombreSeccion(int seccionIndice) {
    switch (seccionIndice) {
        case 0:
            return "Sección A";
        case 1:
            return "Sección B";
        case 2:
            return "Sección C";
        case 3:
            return "Sección D";
        case 4:
            return "Sección E";
        case 5:
            return "Sección F";
        default:
            return "Sección desconocida";
    }
}

void mejorRendimientoPorMateria(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, int materiaIndice) {
    const int NUM_SECCIONES = 6;

    // Crear un arreglo para almacenar los porcentajes de aprobados de cada profesor por materia
    float porcentajes[NUM_SECCIONES] = {0.0};

    // Calcular los porcentajes de aprobados de cada profesor en la materia especificada
    for (int i = 0; i < cantidadEstudiantes; i++) {
        string seccion = estudiantes[i].seccion;
        float porcentaje = obtenerPorcentajeAprobados(estudiantes, cantidadEstudiantes, seccion, materiaIndice);
        porcentajes[i] = porcentaje;
    }

    // Encontrar los profesores con el mejor rendimiento en la materia especificada
    cout << "Materia: " << obtenerNombreMateria(materiaIndice) << endl;
    for (int i = 0; i < NUM_SECCIONES; i++) {
        if (porcentajes[i] >= 0) {
            cout << "Sección: " << obtenerNombreSeccion(i) << ", Rendimiento: " << porcentajes[i] << "%" << endl;
        }
    }
}

void agregarProfesor(Profesor profesores[MAX_PROFESORES], int& cantidadProfesores) {
    if (cantidadProfesores >= MAX_PROFESORES) {
        cout << "No se pueden agregar más profesores. La capacidad máxima ha sido alcanzada." << endl;
        return;
    }

    Profesor nuevoProfesor;
    cout << "Ingrese los datos del nuevo profesor:" << endl;
    cout << "Nombre: ";
    cin >> nuevoProfesor.nombre;
    cout << "Apellido: ";
    cin >> nuevoProfesor.apellido;
    cout << "Email: ";
    cin >> nuevoProfesor.email;
    cout << "Género: ";
    cin >> nuevoProfesor.genero;
    cout << "Sección: ";
    cin >> nuevoProfesor.seccion;
    cout << "ID de materia: ";
    cin >> nuevoProfesor.id_materia;

    profesores[cantidadProfesores] = nuevoProfesor;
    cantidadProfesores++;

    guardarProfesores(profesores, cantidadProfesores);

    cout << "El profesor ha sido agregado correctamente." << endl;
}

void editarInformacionProfesor(Profesor profesores[MAX_PROFESORES], int cantidadProfesores) {
    int idProfesor;
    cout << "Ingrese el ID del profesor a editar: ";
    cin >> idProfesor;

    int indiceProfesor = -1;
    for (int i = 0; i < cantidadProfesores; i++) {
        if (i == idProfesor) {
            indiceProfesor = i;
            break;
        }
    }
    if (indiceProfesor == -1) {
        cout << "No se encontró el profesor." << endl;
        return;
    }

    Profesor& profesor = profesores[indiceProfesor];

    cout << "Editar información del profesor:" << endl;
    cout << "Nuevo nombre: ";
    cin >> profesor.nombre;
    cout << "Nuevo apellido: ";
    cin >> profesor.apellido;
    cout << "Nuevo email: ";
    cin >> profesor.email;
    cout << "Nuevo género: ";
    cin >> profesor.genero;
    cout << "Nueva sección: ";
    cin >> profesor.seccion;
    cout << "Nuevo ID de materia: ";
    cin >> profesor.id_materia;

    cout << "Información del profesor actualizada correctamente." << endl;
    guardarProfesores(profesores, cantidadProfesores);
}

void borrarProfesor(Profesor profesores[MAX_PROFESORES], int& cantidadProfesores) {
    int idProfesor;
    cout << "Ingrese el ID del profesor a borrar: ";
    cin >> idProfesor;

    int indiceProfesor = -1;
    for (int i = 0; i < cantidadProfesores; i++) {
        if (i == idProfesor) {
            indiceProfesor = i;
            break;
        }
    }
    if (indiceProfesor == -1) {
        cout << "No se encontró el profesor." << endl;
        return;
    }

    // Eliminar el profesor moviendo el último profesor a la posición del profesor a borrar
    profesores[indiceProfesor] = profesores[cantidadProfesores - 1];
    cantidadProfesores--;

    cout << "El profesor ha sido eliminado correctamente." << endl;
    guardarProfesores(profesores, cantidadProfesores);
}


void mostrarEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    cout << "Estudiantes y sus notas promedio:" << endl;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        float promedio = calcularPromedio(estudiantes[i]);
        cout << "Nombre: " << estudiantes[i].nombre << " " << estudiantes[i].apellido << ", Promedio: " << promedio << endl;
    }
}
void imprimirBoletaEstudiante(const Estudiante& estudiante) {

    
    cout << endl << endl << "========Boleta de Notas========" << endl;
    cout << "Email: " << estudiante.email << endl;
    cout << "Genero: " << estudiante.genero << endl << endl;
    cout << endl << endl << "Notas:" << endl;
    for (int i = 0; i < MAX_NOTAS; i++) {
        cout << "Nota " << i + 1 << ": " << estudiante.notas[i] << endl;
        
    }

     
}
void buscarEstudiante(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& nombre) {
    bool encontrado = false;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].nombre == nombre) {
            float promedio = calcularPromedio(estudiantes[i]); 
            cout << "Nombre: " << estudiantes[i].nombre << " " << estudiantes[i].apellido; 
            if (promedio > 0) {
                cout << promedio << endl;
                imprimirBoletaEstudiante(estudiantes[i]);
            } else {
                cout << "Las notas son inválidas. Verifícalas y vuelve a intentarlo." << endl;
            }
            encontrado = true;
            break;
        }
    }
    if (!encontrado) {
        cout << "Lo siento, no se encontró el estudiante." << endl;
    }
}

void OpBuscarEstudiante(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes){
string nombre;
cout <<"ingrese el nombre del estudiante que deseas buscar: ";
cin >> nombre;

buscarEstudiante(estudiantes, cantidadEstudiantes, nombre);
}
int obtenerIndiceMateria(const string& materia) {
    if (materia == "Matematicas") {
        return 0;
    } else if (materia == "Sociales") {
        return 1;
    } else if (materia == "Biologia") {
        return 2;
    } else if (materia == "Fisica") {
        return 3;
    } else if (materia == "Educacion Fisica") {
        return 4;
    } else if (materia == "Artes") {
        return 5;
    } else {
        return -1; 
    }
}

void editarInformacionEstudiante(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    string nombre;
    cout << "Ingrese el nombre del estudiante a editar: ";
    cin >> nombre;

    int indiceEstudiante = -1;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].nombre == nombre) {
            indiceEstudiante = i;
            break;
        }
    }
if (indiceEstudiante == -1) {
        cout << "No se encontró el estudiante." << endl;
        return;
    }

    Estudiante& estudiante = estudiantes[indiceEstudiante];

    cout << "Editar información del estudiante:" << endl;
    cout << "Nuevo nombre: ";
    cin >> estudiante.nombre;
    cout << "Nuevo apellido: ";
    cin >> estudiante.apellido;
    cout << "Nuevo email: ";
    cin >> estudiante.email;
    cout << "Nuevo género: ";
    cin >> estudiante.genero;
    cout << "Notas (separadas por espacios): ";
    for (int i = 0; i < MAX_NOTAS; i++) {
        cin >> estudiante.notas[i];
    }


    cout << "Información del estudiante actualizada correctamente." << endl;
    guardarEstudiantes(estudiantes, cantidadEstudiantes);
}

void verificarNotasMateria(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& materia) {
    int indiceMateria = obtenerIndiceMateria(materia);
    if (indiceMateria == -1) {
        cout << "La materia especificada no fue encontrada." << endl;
        return;
    }
    
    int aprobados = 0;
    int aplazados = 0;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (!estudiantes[i].notas[indiceMateria].empty()) {
            float nota = stof(estudiantes[i].notas[indiceMateria]);
            if (nota >= 9.46) {
                aprobados++;
            } else if (nota < 9.45) {
                aplazados++;
            
        }
        }
    }

    cout << "Materia: " << materia << endl;
    cout << "Total de estudiantes cursando la materia: " << aprobados + aplazados << endl;
    cout << "Estudiantes aprobados: " << aprobados << endl;
    cout << "Estudiantes aplazados: " << aplazados << endl;
}

void OpMostrarTodosLosEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes){
    mostrarEstudiantes(estudiantes, cantidadEstudiantes);
}

void agregarEstudiante(Estudiante estudiantes[MAX_ESTUDIANTES], int& cantidadEstudiantes) {
    if (cantidadEstudiantes >= MAX_ESTUDIANTES) {
        cout << "No se pueden agregar más estudiantes. La capacidad máxima ha sido alcanzada." << endl;
        return;
    }

    Estudiante nuevoEstudiante;
    cout << "Ingrese los datos del nuevo estudiante:" << endl;
    cout << "Nombre: ";
    cin >> nuevoEstudiante.nombre;
    cout << "Apellido: ";
    cin >> nuevoEstudiante.apellido;
    cout << "Email: ";
    cin >> nuevoEstudiante.email;
    cout << "Género: ";
    cin >> nuevoEstudiante.genero;
    cout << "Notas (separadas por espacios): ";
    for (int i = 0; i < MAX_NOTAS; i++) {
        cin >> nuevoEstudiante.notas[i];
    }

    estudiantes[cantidadEstudiantes] = nuevoEstudiante;
    cantidadEstudiantes++;

    guardarEstudiantes(estudiantes, cantidadEstudiantes);

    cout << "El estudiante ha sido agregado correctamente." << endl;
}

void mostrarTop10Promedios(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    pair<float, int> promedios[MAX_ESTUDIANTES];

    for (int i = 0; i < cantidadEstudiantes; i++) {
        float promedio = calcularPromedio(estudiantes[i]);
        promedios[i] = make_pair(promedio, i);
    }

    for (int i = 0; i < cantidadEstudiantes - 1; i++) {
        for (int j = 0; j < cantidadEstudiantes - i - 1; j++) {
            if (promedios[j].first < promedios[j + 1].first) {
                swap(promedios[j], promedios[j + 1]);
            }
        }
    }

    cout << "Top 10 de mejores promedios generales:" << endl;
    int count = 0;
    for (int i = 0; i < cantidadEstudiantes && count < 10; i++) {
        int index = promedios[i].second;
        float promedio = promedios[i].first;
        cout << "Nombre: " << estudiantes[index].nombre << " " << estudiantes[index].apellido << "Email:" << estudiantes[index].email << ", Promedio: " << promedio << endl;
        count++;
    }
}

void obtenerProporcionGenerosMateria(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& materia) {
    int indiceMateria = obtenerIndiceMateria(materia);
    if (indiceMateria == -1) {
        cout << "La materia especificada no fue encontrada." << endl;
        return;
    }

    float hombresAprobados = 0;
    float mujeresAprobadas = 0;
    float hombresAplazados = 0;
    float mujeresAplazadas = 0;
    float totalAprobados = 0;
    float totalAplazados = 0;
    float CarmenAprobados = 0;
    float CarmenAplazados = 0;

    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (!estudiantes[i].notas[indiceMateria].empty()) {
            float nota = stof(estudiantes[i].notas[indiceMateria]);
            if (nota >= 9.46) {
                if (estudiantes[i].genero == "Masculino"|| estudiantes[i].genero == "Male") {
                    hombresAprobados++;
                } else if (estudiantes[i].genero == "Femenino"|| estudiantes[i].genero == "Female") {
                    mujeresAprobadas++;
                } else if (estudiantes[i].genero != "Femenino"|| estudiantes[i].genero != "Masculino" || estudiantes[i].genero != "Male"|| estudiantes[i].genero != "Female") {
                    CarmenAprobados++;
                }
                totalAprobados++;
            } else if (nota < 9.45) {
                if (estudiantes[i].genero == "Masculino"|| estudiantes[i].genero == "Male") {
                    hombresAplazados++;
                } else if (estudiantes[i].genero == "Femenino"|| estudiantes[i].genero == "Female") {
                    mujeresAplazadas++;
                } else if (estudiantes[i].genero != "Femenino"|| estudiantes[i].genero != "Masculino" || estudiantes[i].genero != "Male"|| estudiantes[i].genero != "Female") {
                    CarmenAplazados++;
                }
                totalAplazados++;
            }
        }
    }

    cout << "Proporción de géneros en la materia " << materia << " :" << endl;
    cout << "Aprobados: " << endl << "Hombres: " << hombresAprobados << " (" << (hombresAprobados / (totalAprobados)) * 100 << "%)"<< endl << "Mujeres: " << mujeresAprobadas << " (" << (mujeresAprobadas / (totalAprobados)) * 100 << "%)" << endl << " Carmen: "<<CarmenAprobados << " ("<< (CarmenAprobados/(totalAprobados)) * 100 << "%)" << endl << endl;
    
    cout << "Aplazados: " << endl << " Hombres: " << hombresAplazados << " (" << (hombresAplazados / (totalAplazados)) * 100 << "%)"<< endl << " Mujeres: " << mujeresAplazadas << " (" << (mujeresAplazadas / (totalAplazados)) * 100 << "%)" << endl << " Carmen: "<<CarmenAplazados << " ("<< (CarmenAplazados/(totalAprobados)) * 100 << "%)" << endl << endl;
}


int main() {
    Estudiante estudiantes[MAX_ESTUDIANTES];
    Profesor profesores[MAX_PROFESORES];
    int cantidadEstudiantes = cargarEstudiantes(estudiantes);
    int cantidadProfesores = cargarProfesores(profesores);

    int opcion;
    while (true) {
         cout << "============================== Menú ================================" << endl;
    cout << "Presiona (1). Mostrar todos los estudiantes y sus promedios" << endl;
    cout << "Presiona (2). Buscar estudiante" << endl;
    cout << "Presiona (3). Editar información de un estudiante" << endl;
    cout << "Presiona (4). Verificar notas de una materia" << endl;
    cout << "Presiona (5). Mostrar top 10 mejores promedios"<<endl;
    cout << "Presiona (6). Proporcion de estudiantes aplazados y aprobados por genero"<<endl;
    cout << "Presiona (7). Salir" << endl;
    cout << "==========================================================================" << endl;
    cout << "Ingrese la opción deseada: ";
        cin >> opcion;
    
    switch (opcion) {
            case 1:
               { mostrarEstudiantes(estudiantes, cantidadEstudiantes);}
                break;
            case 2:
                {
                    string nombre;
                    cout << "Ingrese el nombre del estudiante que desea buscar: ";
                    cin >> nombre;
                    buscarEstudiante(estudiantes, cantidadEstudiantes, nombre);
                }
                break;
            case 3:
                editarInformacionEstudiante(estudiantes, cantidadEstudiantes);
                break;
            case 4:
                {
                    string materia;
                    cout << "Ingrese el nombre de la materia: ";
                    cin >> materia;
                    verificarNotasMateria(estudiantes, cantidadEstudiantes, materia);
                }
                break;
            case 5:
                {mostrarTop10Promedios(estudiantes, cantidadEstudiantes);}
                break;
            case 6:
            {string materia;
            cout << "ingrese el nombre de la materia: "<<endl;
            cin >> materia;
            obtenerProporcionGenerosMateria(estudiantes, cantidadEstudiantes, materia);}
            break;
            case 7:
            {string id;
            cout << "ingrese el id del estudiante que desea borrar: "<<endl;
            cin >> id;
            borrarEstudiante(estudiantes, cantidadEstudiantes, id);}
             break;
            case 8:
                agregarProfesor(profesores, cantidadProfesores);
                break;
            case 9:
                editarInformacionProfesor(profesores, cantidadProfesores);
                break;
            case 10:
                borrarProfesor(profesores, cantidadProfesores);
                break;
            case 11:
            {string seccion;
            cout << "ingrese la seccion: "<<endl;
            cin >> seccion;
            top10PromediosSeccion(estudiantes, cantidadEstudiantes, seccion);}
             break;
            case 12:
            {string seccion;
            int materiaIndice;
            cout << "ingrese la seccion: "<<endl;
            cin >> seccion;
            cout << "Ingrese la materia:" <<endl<<"Presione (0) para Matematicas" <<endl<< "Presione (1) para Sociales"<<endl<<"Presione (2) para Biologia"<<endl<<"Presione (3) para Educacion Fisica"<<endl<< "Presione (4) para Artes."<<endl;
            cin >> materiaIndice;
            string rendimiento = calcularRendimientoProfesor(estudiantes, cantidadEstudiantes, seccion, materiaIndice);
            cout <<"El rendimiento del profesor en la seccion: "<< seccion << "en la materia" << obtenerNombreMateria(materiaIndice)<< " es: "<< rendimiento <<endl;
            }
             break;
            case 13:
            {
            mejorRendimientoPorSeccion(estudiantes, cantidadEstudiantes);
            }
             break;
            case 14:
            {
            int materiaIndice;
            cout << "Ingrese la materia:" <<endl<<"Presione (0) para Matematicas" <<endl<< "Presione (1) para Sociales"<<endl<<"Presione (2) para Biologia"<<endl<<"Presione (3) para Educacion Fisica"<<endl<< "Presione (4) para Artes."<<endl;
            cin>> materiaIndice;
            mejorRendimientoPorMateria(estudiantes, cantidadEstudiantes, materiaIndice);
            }
            break;
            case 15:
            {cout << "Saliendo del programa..." << endl;}
            return 0;
            default:
                {cout << "Opción inválida. Intente nuevamente." << endl;}
                break;
        }

        cout << endl;
    }

    return 0;
}

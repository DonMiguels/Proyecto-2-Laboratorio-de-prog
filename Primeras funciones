
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

const int MAX_ESTUDIANTES = 1200;
const int MAX_NOTAS = 6;

struct Estudiante {
    string nombre;
    string apellido;
    string email;
    string genero;
    string notas[MAX_NOTAS];
};
struct Materia {
        string nombre;
        Estudiante estudiantes[MAX_ESTUDIANTES];
        string cantidadAlumnos;
    };

float calcularPromedio(const Estudiante& estudiante) {
    float suma = 0.0;
    int contador = 0;
    for (int i = 0; i < MAX_NOTAS; i++) {
        if (!estudiante.notas[i].empty()){
            try{
                suma+= stof(estudiante.notas[i]);
                contador++;
            } catch (const invalid_argument&){

            }
        }
       
    }
    return contador > 0 ? suma / contador : 0.0;
}

int cargarEstudiantes(Estudiante estudiantes[MAX_ESTUDIANTES]) {
    ifstream archivo("Datos_Estudiantes_revisado.csv");
    int cantidadEstudiantes = 0;
    if (archivo.is_open()) {
        string linea;
        int numeroLinea = 0;
        while (getline(archivo, linea)) {
            numeroLinea++;
            if (numeroLinea > 1) {
                Estudiante estudiante;
                size_t pos = 0;
                string token;
                int index = 0;
                while ((pos = linea.find(";")) != string::npos) {
                    token = linea.substr(0, pos);
                    switch (index) {
                        case 0:
                            estudiante.nombre = token;
                            break;
                        case 1:
                            estudiante.apellido = token;
                            break;
                        case 2:
                            estudiante.email = token;
                            break;
                        case 3:
                            estudiante.genero = token;
                            break;
                        default:
                            estudiante.notas[index - 4] = token;
                            break;
                    }
                    linea.erase(0, pos + 1);
                    index++;
                }
                if(!linea.empty()){
                    estudiante.notas[index - 4] = linea;
                // corregi el error del salto de linea
                }
                estudiantes[cantidadEstudiantes] = estudiante;
                cantidadEstudiantes++;
            }
        }
        archivo.close();
    }
    return cantidadEstudiantes;
}

void guardarEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    ofstream archivo("Datos_Estudiantes_revisado.csv");
    if (archivo.is_open()) {
        for (int i = 0; i < cantidadEstudiantes; i++) {
            archivo << estudiantes[i].nombre << ";" << estudiantes[i].apellido << ";" << estudiantes[i].email << ";"
                    << estudiantes[i].genero;
            for (int j = 0; j < MAX_NOTAS; j++) {
                archivo << ";" << estudiantes[i].notas[j];
            }
            archivo << endl;
        }
        archivo.close();
    }
}

void mostrarEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    cout << "Estudiantes y sus notas promedio:" << endl;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        float promedio = calcularPromedio(estudiantes[i]);
        cout << "Nombre: " << estudiantes[i].nombre << " " << estudiantes[i].apellido << ", Promedio: " << promedio << endl;
    }
}
void imprimirBoletaEstudiante(const Estudiante& estudiante) {

    
    cout << endl << endl << "========Boleta de Notas========" << endl;
    cout << "Email: " << estudiante.email << endl;
    cout << "Genero: " << estudiante.genero << endl << endl;
    cout << endl << endl << "Notas:" << endl;
    for (int i = 0; i < MAX_NOTAS; i++) {
        cout << "Nota " << i + 1 << ": " << estudiante.notas[i] << endl;
        
    }

     
}
void buscarEstudiante(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& nombre) {
    bool encontrado = false;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].nombre == nombre) {
            float promedio = calcularPromedio(estudiantes[i]); 
            cout << "Nombre: " << estudiantes[i].nombre << " " << estudiantes[i].apellido; 
            if (promedio > 0) {
                cout << promedio << endl;
                imprimirBoletaEstudiante(estudiantes[i]);
            } else {
                cout << "Las notas son inválidas. Verifícalas y vuelve a intentarlo." << endl;
            }
            encontrado = true;
            break;
        }
    }
    if (!encontrado) {
        cout << "Lo siento, no se encontró el estudiante." << endl;
    }
}

void OpBuscarEstudiante(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes){
string nombre;
cout <<"ingrese el nombre del estudiante que deseas buscar: ";
cin >> nombre;

buscarEstudiante(estudiantes, cantidadEstudiantes, nombre);
}
int obtenerIndiceMateria(const string& materia) {
    if (materia == "Matematicas") {
        return 0;
    } else if (materia == "Sociales") {
        return 1;
    } else if (materia == "Biologia") {
        return 2;
    } else if (materia == "Fisica") {
        return 3;
    } else if (materia == "Educacion Fisica") {
        return 4;
    } else if (materia == "Artes") {
        return 5;
    } else {
        return -1; 
    }
}

void editarInformacionEstudiante(Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    string nombre;
    cout << "Ingrese el nombre del estudiante a editar: ";
    cin >> nombre;

    int indiceEstudiante = -1;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (estudiantes[i].nombre == nombre) {
            indiceEstudiante = i;
            break;
        }
    }
if (indiceEstudiante == -1) {
        cout << "No se encontró el estudiante." << endl;
        return;
    }

    Estudiante& estudiante = estudiantes[indiceEstudiante];

    cout << "Editar información del estudiante:" << endl;
    cout << "Nuevo nombre: ";
    cin >> estudiante.nombre;
    cout << "Nuevo apellido: ";
    cin >> estudiante.apellido;
    cout << "Nuevo email: ";
    cin >> estudiante.email;
    cout << "Nuevo género: ";
    cin >> estudiante.genero;
    cout << "Notas (separadas por espacios): ";
    for (int i = 0; i < MAX_NOTAS; i++) {
        cin >> estudiante.notas[i];
    }


    cout << "Información del estudiante actualizada correctamente." << endl;
    guardarEstudiantes(estudiantes, cantidadEstudiantes);
}

void verificarNotasMateria(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes, const string& materia) {
    int indiceMateria = obtenerIndiceMateria(materia);
    if (indiceMateria == -1) {
        cout << "La materia especificada no fue encontrada." << endl;
        return;
    }
    
    int aprobados = 0;
    int aplazados = 0;
    for (int i = 0; i < cantidadEstudiantes; i++) {
        if (!estudiantes[i].notas[indiceMateria].empty()) {
            float nota = stof(estudiantes[i].notas[indiceMateria]);
            if (nota >= 9.46) {
                aprobados++;
            } else if (nota < 9.45) {
                aplazados++;
            
        }
        }
    }

    cout << "Materia: " << materia << endl;
    cout << "Total de estudiantes cursando la materia: " << aprobados + aplazados << endl;
    cout << "Estudiantes aprobados: " << aprobados << endl;
    cout << "Estudiantes aplazados: " << aplazados << endl;
}

void OpMostrarTodosLosEstudiantes(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes){
    mostrarEstudiantes(estudiantes, cantidadEstudiantes);
}

void agregarEstudiante(Estudiante estudiantes[MAX_ESTUDIANTES], int& cantidadEstudiantes) {
    if (cantidadEstudiantes >= MAX_ESTUDIANTES) {
        cout << "No se pueden agregar más estudiantes. La capacidad máxima ha sido alcanzada." << endl;
        return;
    }

    Estudiante nuevoEstudiante;
    cout << "Ingrese los datos del nuevo estudiante:" << endl;
    cout << "Nombre: ";
    cin >> nuevoEstudiante.nombre;
    cout << "Apellido: ";
    cin >> nuevoEstudiante.apellido;
    cout << "Email: ";
    cin >> nuevoEstudiante.email;
    cout << "Género: ";
    cin >> nuevoEstudiante.genero;
    cout << "Notas (separadas por espacios): ";
    for (int i = 0; i < MAX_NOTAS; i++) {
        cin >> nuevoEstudiante.notas[i];
    }

    estudiantes[cantidadEstudiantes] = nuevoEstudiante;
    cantidadEstudiantes++;

    guardarEstudiantes(estudiantes, cantidadEstudiantes);

    cout << "El estudiante ha sido agregado correctamente." << endl;
}

void mostrarTop10Promedios(const Estudiante estudiantes[MAX_ESTUDIANTES], int cantidadEstudiantes) {
    pair<float, int> promedios[MAX_ESTUDIANTES];

    for (int i = 0; i < cantidadEstudiantes; i++) {
        float promedio = calcularPromedio(estudiantes[i]);
        promedios[i] = make_pair(promedio, i);
    }

    for (int i = 0; i < cantidadEstudiantes - 1; i++) {
        for (int j = 0; j < cantidadEstudiantes - i - 1; j++) {
            if (promedios[j].first < promedios[j + 1].first) {
                swap(promedios[j], promedios[j + 1]);
            }
        }
    }

    cout << "Top 10 de mejores promedios generales:" << endl;
    int count = 0;
    for (int i = 0; i < cantidadEstudiantes && count < 10; i++) {
        int index = promedios[i].second;
        float promedio = promedios[i].first;
        cout << "Nombre: " << estudiantes[index].nombre << " " << estudiantes[index].apellido << "Email:" << estudiantes[index].email << ", Promedio: " << promedio << endl;
        count++;
    }
}


int main() {
Estudiante estudiantes[MAX_ESTUDIANTES];
    int cantidadEstudiantes = cargarEstudiantes(estudiantes);

    int datos;
    cout << "Presione 1 o 2 para activar el programa: ";
    cin >> datos;

    if (datos == 1) {
        OpMostrarTodosLosEstudiantes(estudiantes, cantidadEstudiantes);
    } else if (datos == 2) {
       editarInformacionEstudiante(estudiantes, cantidadEstudiantes);
    } else {
        cout << "Opción inválida." << endl;
        return 1;
    }
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Matematicas");
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Sociales");
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Biologia");
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Fisica");
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Educacion Fisica");
    verificarNotasMateria(estudiantes, cantidadEstudiantes, "Artes");

    return 0;
}
